"""Add country table

Revision ID: 132a15529d53
Revises: b5f16c9cced0
Create Date: 2024-07-22 16:23:18.033033

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from geoalchemy2 import Geometry
import json
from shapely.geometry import shape
from shapely import wkt
import uuid
from sqlalchemy.dialects.postgresql import UUID

# revision identifiers, used by Alembic.
revision: str = "132a15529d53"
down_revision: Union[str, None] = "b5f16c9cced0"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    op.create_geospatial_table(
        "country",
        sa.Column("iterator", sa.Integer(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "iso_a2", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "iso_a3", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("iso_n3", sa.Integer(), nullable=False),
        sa.Column(
            "geom",
            Geometry(
                geometry_type="MULTIPOLYGON",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("iterator"),
    )
    op.create_geospatial_index(
        "idx_country_geom",
        "country",
        ["geom"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_index(op.f("ix_country_id"), "country", ["id"], unique=False)
    op.create_index(
        op.f("ix_country_iso_a2"), "country", ["iso_a2"], unique=False
    )
    op.create_index(
        op.f("ix_country_iso_a3"), "country", ["iso_a3"], unique=False
    )
    op.create_index(
        op.f("ix_country_iso_n3"), "country", ["iso_n3"], unique=False
    )
    op.create_index(
        op.f("ix_country_iterator"), "country", ["iterator"], unique=False
    )
    op.create_index(op.f("ix_country_name"), "country", ["name"], unique=False)

    # Bulk insert from reading the ./resources/ne_50m_admin_0_countries.geojson
    # file and inserting the data into the country table
    countries = []
    with open("./migrations/resources/ne_50m_admin_0_countries.geojson") as f:
        ''' Countries sourced as 5.1.1 version from Natural Earth

        GeoJSON files located at:
        https://github.com/nvkelso/natural-earth-vector/tree/master/geojson

        '''
        data = json.load(f)
        for feature in data["features"]:
            geom_wkt = wkt.dumps(shape(feature["geometry"]))
            country = {
                "id": str(uuid.uuid4()),
                "name": feature["properties"]["ADMIN"],
                "iso_a2": feature["properties"]["ISO_A2"],
                "iso_a3": feature["properties"]["ISO_A3"],
                "iso_n3": int(feature["properties"]["ISO_N3"]),
                "geom": geom_wkt,
            }
            countries.append(country)

    op.bulk_insert(
        sa.table(
            "country",
            sa.column("id", UUID),
            sa.column("name", sa.String),
            sa.column("iso_a2", sa.String),
            sa.column("iso_a3", sa.String),
            sa.column("iso_n3", sa.Integer),
            sa.column(
                "geom", Geometry(geometry_type="MULTIPOLYGON", srid=4326)
            ),
        ),
        countries,
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_country_name"), table_name="country")
    op.drop_index(op.f("ix_country_iterator"), table_name="country")
    op.drop_index(op.f("ix_country_iso_n3"), table_name="country")
    op.drop_index(op.f("ix_country_iso_a3"), table_name="country")
    op.drop_index(op.f("ix_country_iso_a2"), table_name="country")
    op.drop_index(op.f("ix_country_id"), table_name="country")
    op.drop_geospatial_index(
        "idx_country_geom",
        table_name="country",
        postgresql_using="gist",
        column_name="geom",
    )
    op.drop_geospatial_table("country")
    # ### end Alembic commands ###
